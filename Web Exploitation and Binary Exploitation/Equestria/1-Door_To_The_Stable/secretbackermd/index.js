const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const { createToken, verifyToken } = require("./jwt");
const { dbAsync, initDb } = require("./db");

initDb();

const app = express();

app.use((req, res, next) => {
  if (
    req.headers.authorization !==
    "Basic cHIxbmNlc3M6U0stQ0VSVHswZmZfYnlfNF9zMW5nbGVfc2w0c2hfZjgzNmE4YjF9"
  ) {
    res.setHeader("WWW-Authenticate", 'Basic realm="Secure Stable Area"');
    return res.status(401).send("Unauthorized");
  }
  next();
});

app.use(express.json());
app.use("/", express.static("public"));
app.use(cookieParser());

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function sendEmailToAdministrator(userId, username) {
  // TODO: Implement email sending. We'll just sleep until then.
  await sleep(1000);
  console.log(`ðŸ¦„ Dark Council notified about new subject: ${username}`);
  return true;
}

app.post("/api/register", async (req, res) => {
  try {
    const { username, password, email } = req.body;

    const { rows } = await dbAsync.query(
      "INSERT INTO users (username, password, email) VALUES ($1, $2, $3) RETURNING id",
      [username, password, email]
    );

    const userId = rows[0].id;
    await sendEmailToAdministrator(userId, username);

    await dbAsync.query("UPDATE users SET verified = false WHERE id = $1", [
      userId,
    ]);

    return res.json({
      success: true,
      message:
        "Welcome to the Dark Stable. The Council will judge your worthiness.",
    });
  } catch (err) {
    if (err.constraint === "users_username_key") {
      return res.status(400).json({ error: "Username already exists" });
    }
    res.status(500).json({ error: "Registration failed", msg: err.message });
  }
});

app.post("/api/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const { rows } = await dbAsync.query(
      "SELECT id, username, verified FROM users WHERE username = $1 AND password = $2",
      [username, password]
    );

    if (rows.length === 0) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    const user = rows[0];
    if (!user.verified) {
      return res
        .status(401)
        .json({ error: "The Dark Council has not approved you yet" });
    }

    const token = createToken({
      id: user.id,
      username: user.username,
    });

    res.cookie("token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
    });

    return res.json({
      success: true,
      welcome_msg: process.env.LOGIN_WELCOME_MESSAGE,
    });
  } catch (err) {
    return res.status(500).json({ error: "Login failed" });
  }
});

function authMiddleware(req, res, next) {
  const token = req.cookies.token;
  if (!token) return res.status(401).json({ error: "No token provided" });

  const payload = verifyToken(token);
  if (!payload) {
    return res.status(401).json({ error: "Invalid token" });
  }

  req.user = payload;
  next();
}

app.get("/api/secret-note", authMiddleware, async (req, res) => {
  if (req.user.is_d4rk_pr1nc3ss) {
    return res.send(process.env.DARK_PRINCESS_SECRET);
  }
  return res.send("You are not the Dark Princess");
});

function filterSQLChars(input) {
  return input.replace(/['";\\=()\/\n\r ]/g, "").replaceAll("--", "");
}

app.get("/api/notes", authMiddleware, async (req, res) => {
  try {
    const q = "SELECT * FROM notes WHERE user_id = '{{user_id}}'".replace(
      "{{user_id}}",
      filterSQLChars(req.user.id)
    );
    const { rows } = await dbAsync.query(q);
    return res.json(rows);
  } catch (err) {
    return res.status(500).json({ error: "Query failed", err: err.message });
  }
});

app.post("/api/notes", authMiddleware, async (req, res) => {
  try {
    const { content } = req.body;
    const { rows } = await dbAsync.query(
      "INSERT INTO notes (user_id, content) VALUES ($1, $2) RETURNING id",
      [req.user.id, content]
    );
    return res.json({ id: rows[0].id });
  } catch (err) {
    return res.status(500).json({ error: "Failed to create note" });
  }
});

app.post("/api/logout", (req, res) => {
  res.clearCookie("token");
  return res.json({ success: true });
});

app.listen(3000, () => console.log("Server running on port 3000"));
